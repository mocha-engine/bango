/*
 * ui.mshdr
 * Author: Alex
 *
 * Copyright (c) 2022 Alex Guthrie
 */

#pragma optionNV(unroll all)

//
// Common
//
#define PI 3.14159

//
// Uniforms
//
layout(set = 0, binding = 0) uniform texture2D g_tAtlas;
layout(set = 0, binding = 1) uniform sampler g_sSampler;
layout(set = 0, binding = 2) uniform ObjectUniformBuffer
{
    vec4 vSdfRange;
}
g_oUbo;

struct VS_OUT
{
    vec3 vPositionWS;
    vec3 vPositionPS;
    vec2 vTexCoords;
    vec4 vColor;
    float flScreenPxRange;
    vec2 vPanelPos;
    vec2 vPanelSize;
};

//
// Flags
//
// RenderMode
const uint RENDER_MODE_NONE = 0;
const uint RENDER_MODE_USE_RAW_IMAGE = 1;
const uint RENDER_MODE_USE_SDF = 2;

// ==========================================================================================================================

//
// Vertex
//
#ifdef VERTEX

//
// Layout
//
layout(location = 0) in vec3 g_vPosition;
layout(location = 1) in vec2 g_vTexCoords;
layout(location = 2) in vec4 g_vColor;
layout(location = 3) in vec2 g_vPanelPos;
layout(location = 4) in vec2 g_vPanelSize;
layout(location = 5) in int g_renderMode;
layout(location = 6) in vec4 g_rounding;

//
// Out
//
layout(location = 0) out VS_OUT vs_out;
layout(location = 8) flat out int vs_renderMode;
layout(location = 9) flat out vec4 vs_rounding;

void main()
{
    vec4 pos = vec4(g_vPosition.xy, 0.0, 1.0);

    vs_out.vPositionWS = g_vPosition;
    vs_out.vPositionPS = pos.xyz;
    vs_out.vTexCoords = g_vTexCoords;
    vs_out.vColor = g_vColor;
    vs_out.vPanelPos = g_vPanelPos;
    vs_out.vPanelSize = g_vPanelSize;

    vs_renderMode = g_renderMode;
    vs_rounding = g_rounding;
    gl_Position = pos;
}

#endif

// ==========================================================================================================================

//
// Fragment
//
#ifdef FRAGMENT

//
// In
//
layout(location = 0) in VS_OUT fs_in;
layout(location = 8) flat in int fs_renderMode;
layout(location = 9) flat in vec4 fs_rounding;

//
// Out
//
layout(location = 0) out vec4 fragColor;

vec4 GetTextureSample(texture2D tex)
{
    return texture(sampler2D(tex, g_sSampler), fs_in.vTexCoords);
}

float sdRoundedBox(in vec2 p, in vec2 b, in vec4 r)
{
    r.xy = (p.x > 0.0) ? r.xy : r.zw;
    r.x = (p.y > 0.0) ? r.x : r.y;
    vec2 q = abs(p) - b + r.x;
    return min(max(q.x, q.y), 0.0) + length(max(q, 0.0)) - r.x;
}

float sdBox(in vec2 p, in vec2 b)
{
    vec2 d = abs(p) - b;
    return min(max(d.x, d.y), 0.0) + length(max(d, 0.0));
}

void main()
{
    vec4 texSample = GetTextureSample(g_tAtlas);

    if ((fs_renderMode & RENDER_MODE_USE_RAW_IMAGE) == RENDER_MODE_USE_RAW_IMAGE)
    {
        fragColor = texSample;
    }
    else
    {
        float opacity = 1.0;

        if ((fs_renderMode & RENDER_MODE_USE_SDF) == RENDER_MODE_USE_SDF)
        {
            float r = texSample.r;
            float g = texSample.g;
            float b = texSample.b;

            float median = max(min(r, g), min(max(r, g), b));
            float signed_dist = 1.0 * (median - 0.5);

            opacity = clamp(signed_dist + 0.5, 0.0, 1.0);
        }

        fragColor = vec4(fs_in.vColor.rgb, opacity * fs_in.vColor.a);
    }

    vec2 uv = (fs_in.vPanelPos * 2.0) - fs_in.vPanelSize;
    vec2 size = fs_in.vPanelSize;

    float r = sdRoundedBox(uv, size, fs_rounding);
    float a = clamp(r + 0.5, 0.0, 1.0);

    fragColor.a *= 1.0 - a;
}
#endif
// ==========================================================================================================================